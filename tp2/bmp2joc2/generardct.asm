; void generarDCT(float DCT[8][8]) {	; int i, j;	; float ci;	; for (i = 0 ; i < 8 ; i++) {		; for (j = 0 ; j < 8 ; j++) {			; if (i == 0) {				; ci = (float)sqrt(1.0/8.0);			; } else {				; ci = (float)sqrt(2.0/8.0);			; }			; DCT[i][j] = (float) (  ci * cos(((2 * j + 1) * i * M_PI) / 16.0)  );		; }	; }; }global generarDCT%define p_dct [ebp+8]generarDCT:	push ebp	mov ebp, esp	push ebx	push esi	push edi	; calcula sqrt(1/8), sqrt(2/8) y 16	finit								;[]	fld1								;[1]	fld1								;[1, 1]	fadd								;[2, 1]	fld st0								;[2, 2, 1]	fadd								;[4, 2, 1]	fadd								;[8, 2, 1]	fdiv st2, st0						;[8, 2, 1/8]	fdiv st1, st0						;[8, 2/8, 1/8]	fadd								;[16, 2/8, 1/8]	fld st2								;[1/8, 16, 2/8, 1/8]	fsqrt								;[sqrt(1/8), 16, 2/8, 1/8]	fld st2								;[2/8, sqrt(1/8), 16, 2/8, 1/8]	fsqrt								;[sqrt(2/8), sqrt(1/8), 16, ..]	pop edi	pop esi	pop ebx	pop ebp	ret